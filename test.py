from flask import json
from unittest.mock import patch, MagicMock
from unittest.mock import patch
from flask_cors import CORS
import connexion
from flask_testing import TestCase

import sys
import os

if not os.path.exists("config.py"):
    print("Configuration 'config.py' not found.  "
          "You may create one from 'config.py.example'.")
    sys.exit(1)

from config import OPENAPI_STUB_DIR

if not os.path.exists(OPENAPI_STUB_DIR):
    print(f"Folder '{OPENAPI_STUB_DIR}' not found.  "
          "Please create the folder and extract zip file "
          "generated by openapi-generator into it.")
    sys.exit(1)

sys.path.append(OPENAPI_STUB_DIR)

try:
    import connexion
except ModuleNotFoundError:
    print("Please install all required packages by running:"
          " pip install -r requirements.txt")
    sys.exit(1)


from swagger_server import encoder


class BaseTestCase(TestCase):
    def create_app(self):
        app = connexion.App(__name__, specification_dir='./openapi/')
        app.app.json_encoder = encoder.JSONEncoder
        flask_app = app.app
        CORS(flask_app)
        app.add_api('th-movie-mentor-api.yaml',
                    arguments={'title': 'TH-Movie Mentor API'}, pythonic_params=True)
        app.app.testing = True
        return app.app


class TestRetrieveListAllMovie(BaseTestCase):
    def test_get_all_movie(self):
        """Test case to verify request all movies

        Retrieve a list of all movies
        """
        response = self.client.get('/TH-Movie/movies')
        self.assert200(response)


class TestRetrieveMovieInformation(BaseTestCase):
    def test_get_valid_movie_detail(self):
        """Test case to verify request specific movies with valid movie

        Get a movie information for specific movie
        """
        response = self.client.get('/TH-Movie/movies/{movieId}'.format(movieId='m001'))
        self.assert200(response)


class TestRetrieveMovieByGender(BaseTestCase):
    def test_get_movies_by_valid_gender(self):
        """Test case to verify request list movies for with valid gender

        Get a list of movies popular with a specific gender
        """
        response = self.client.get('/TH-Movie/movies/gender/{gender}'.format(gender='male'))
        self.assert200(response)

    def test_get_movies_by_invalid_gender(self):
        """Test case to verify request list movies for with invalid gender"""
        response = self.client.get('/TH-Movie/movies/gender/{gender}'.format(gender='abc'))
        self.assert400(response)


class TestRetrieveMovieByAge(BaseTestCase):
    def test_get_movies_by_valid_age(self):
        """Test case to verify request list movies for with valid age

        Get a list of movies popular with a specific age
        """
        response = self.client.get('/TH-Movie/movies/age/{age}'.format(age=20))
        self.assert200(response)

    def test_get_movies_by_invalid_age(self):
        """Test case to verify request list movies for with invalid age"""
        response = self.client.get('/TH-Movie/movies/age/{age}'.format(age=999))
        self.assert404(response)


class TestRetrieveMovieByPlatform(BaseTestCase):
    def test_get_movies_by_valid_platform(self):
        """Test case to verify request list movies for with valid platform

        Get a list of movies available on a specific platform
        """
        response = self.client.get('/TH-Movie/movies/platform/{platformId}'.format(platformId='p001'))
        self.assert200(response)

    def test_get_movies_by_invalid_platform(self):
        """Test case to verify request list movies for with invalid platform"""
        response = self.client.get('/TH-Movie/movies/platform/{platformId}'.format(platformId='p555'))
        self.assert404(response)


class TestRetrieveMovieByActor(BaseTestCase):
    def test_get_movies_by_valid_actor(self):
        """Test case to verify request list movies for with valid actor

        Get a list of movies starring a specific actor
        """
        response = self.client.get('/TH-Movie/movies/actor/{actorId}'.format(actorId='a001'))
        self.assert200(response)

    def test_get_movies_by_invalid_actor(self):
        """Test case to verify request list movies for with invalid actor"""
        response = self.client.get('/TH-Movie/movies/actor/{actorId}'.format(actorId='a999'))
        self.assert404(response)


class TestRetrieveMovieByGenre(BaseTestCase):
    def test_get_movies_by_valid_genre(self):
        """Test case to verify request list movies for with valid genre

        Get a list of movies of a specific genre
        """
        response = self.client.get('/TH-Movie/movies/genre/{genreId}'.format(genreId='g001'))
        self.assert200(response)

    def test_get_movies_by_invalid_genre(self):
        """Test case to verify request list movies for with invalid genre

        Get a list of movies of a specific genre
        """
        response = self.client.get('/TH-Movie/movies/genre/{genreId}'.format(genreId='g999'))
        self.assert404(response)


class TestRetrieveMovieByYear(BaseTestCase):
    def test_get_movies_by_valid_year(self):
        """Test case to verify request list movies for with valid year

        Get a list of movies released in a specific year
        """
        response = self.client.get('/TH-Movie/movies/year/{year}'.format(year=2023))
        self.assert200(response)

    def test_get_movies_by_invalid_year(self):
        """Test case to verify request list movies for with valid year

        Get a list of movies released in a specific year
        """
        response = self.client.get('/TH-Movie/movies/year/{year}'.format(year=2050))
        self.assert404(response)


class TestRetrieveMovieByGenderAge(BaseTestCase):
    def test_controller_get_movies_by_valid_gender_valid_age(self):
        """Test case to verify request list movies for with valid age and gender

        Get a list of movies popular with a specific gender and age
        """
        response = self.client.get('/TH-Movie/movies/gender/{gender}/age/{age}'.format(
                gender='male', age=20))
        self.assert200(response)

    def test_controller_get_movies_by_valid_gender_invalid_age(self):
        """Test case to verify request list movies for with valid age and invalid gender"""
        response = self.client.get('/TH-Movie/movies/gender/{gender}/age/{age}'.format(
                gender='male', age=999))
        self.assert404(response)

    def test_controller_get_movies_by_invalid_gender_valid_age(self):
        """Test case to verify request list movies for with invalid age and valid gender"""
        response = self.client.get('/TH-Movie/movies/gender/{gender}/age/{age}'.format(
                gender='abc', age=20))
        self.assert400(response)

    def test_controller_get_movies_by_invalid_gender_invalid_age(self):
        """Test case to verify request list movies for with invalid age and gender"""
        response = self.client.get('/TH-Movie/movies/gender/{gender}/age/{age}'.format(
                gender='abc', age=999))
        self.assert400(response)


class TestRetrieveActorByMovie(BaseTestCase):
    def test_get_actors_of_valid_movie(self):
        """Test case to verify request list actor with valid movie

        Get a list of actor for specific movie
        """
        response = self.client.get('/TH-Movie/actorsOfMovie/{movieId}'.format(movieId='m001'))
        self.assert200(response)

    def test_get_actors_of_invalid_movie(self):
        """Test case to verify request list actor with invalid movie"""
        response = self.client.get('/TH-Movie/actorsOfMovie/{movieId}'.format(movieId='m999'))
        self.assert404(response)


class TestRetrieveGenreByMovie(BaseTestCase):
    def test_get_genres_of_valid_movie(self):
        """Test case to verify request list genre with valid movie

        Get a list of movies of a specific genre
        """
        response = self.client.get('/TH-Movie/genresOfMovie/{movieId}'.format(
                movieId='m001'))
        self.assert200(response)

    def test_get_genres_of_invalid_movie(self):
        """Test case to verify request list genre with invalid movie"""
        response = self.client.get('/TH-Movie/genresOfMovie/{movieId}'.format(
                movieId='m999'))
        self.assert404(response)


class TestRetrievePlatformByMovie(BaseTestCase):
    def test_get_platforms_of_valid_movie(self):
        """Test case to verify request list platform with valid movie

        Get a list of platforms where a specific movie is available
        """
        response = self.client.get('/TH-Movie/platformsOfMovie/{movieId}'.format(
                movieId='m002'))
        self.assert200(response)

    def test_get_platforms_of_invalid_movie(self):
        """Test case to verify request list platform with invalid movie"""
        response = self.client.get('/TH-Movie/platformsOfMovie/{movieId}'.format(
                movieId='m999'))
        self.assert404(response)
